import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:jetsetgo/components/add_button.dart';
import 'trip_suggestions.dart';
import 'package:intl/intl.dart';

class AddTrip extends StatefulWidget {
  const AddTrip({super.key});

  @override 
  _AddTripState createState() => _AddTripState();
}

class _AddTripState extends State<AddTrip> {
  final _formKey = GlobalKey<FormState>();
  final _cityController = TextEditingController();
  final _countryController = TextEditingController();
  DateTime? _startDate;
  DateTime? _endDate;

  @override
  void dispose() {
    _cityController.dispose();
    _countryController.dispose();
    super.dispose();
  }

  Future<void> _addTrip() async {
    if (_formKey.currentState!.validate() && _startDate != null && _endDate != null) {
      final user = FirebaseAuth.instance.currentUser!;
      final duration = _endDate!.difference(_startDate!).inDays;
      final month = DateFormat.MMMM().format(_startDate!); // e.g., March

      final tripData = {
        'City': _cityController.text,
        'Country': _countryController.text,
        'DateLeaving': _startDate!.day,
        'DateReturning': _endDate!.day,
        'Duration': duration,
        'Month': month,
      };

      try {
        final userDoc = FirebaseFirestore.instance.collection('users').doc(user.uid);

        // Create main trip doc
        final tripDocRef = await userDoc.collection('trip').add({}); // Empty trip doc

        // Add tripData into tripID subcollection with autogenerated doc ID
        final tripIdDocRef = tripDocRef.collection('tripID').doc();
        await tripIdDocRef.set(tripData);

        // Create Itinerary subcollection
        final itineraryDocRef = tripDocRef.collection('Itinerary').doc("Day 1 - Arrival");
        await itineraryDocRef.set({});
        await itineraryDocRef.collection('Details').doc().set({});


        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Trip added successfully!')),
        );

        Navigator.pop(context);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to add trip: $e')),
        );
      }
    }
  }

  Future<void> _pickDateRange() async {
    final picked = await showDateRangePicker(
      context: context,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );

    if (picked != null) {
      setState(() {
        _startDate = picked.start;
        _endDate = picked.end;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final dateString = (_startDate != null && _endDate != null)
        ? "${DateFormat.MMMd().format(_startDate!)} - ${DateFormat.MMMd().format(_endDate!)}"
        : "Select Trip Dates";

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        toolbarHeight: 80,
        title: const Text(
          'Add a New Trip',
          style: TextStyle(fontSize: 24, color: Colors.black),
        ),
        backgroundColor: const Color.fromARGB(255, 245, 244, 246),
        elevation: 0,
        iconTheme: const IconThemeData(color: Colors.black),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => TripSuggestions()),
              );
            },
            child: const Text(
              'Suggest new trips for me',
              style: TextStyle(fontSize: 16, color: Colors.blue),
            ),
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              _buildTextField(_cityController, 'City'),
              const SizedBox(height: 15),
              _buildTextField(_countryController, 'Country'),
              const SizedBox(height: 15),
              GestureDetector(
                onTap: _pickDateRange,
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 12),
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey),
                    color: const Color.fromARGB(255, 252, 252, 252),
                  ),
                  child: Text(
                    dateString,
                    style: const TextStyle(fontSize: 16, color: Colors.black87),
                  ),
                ),
              ),
              const SizedBox(height: 20),
              if (_startDate != null && _endDate != null)
                Text(
                  'Duration: ${_endDate!.difference(_startDate!).inDays} days',
                  style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
                ),
            ],
          ),
        ),
      ),
      floatingActionButton: AddButton(
        label: 'Add Trip',
        onPressed: _addTrip,
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
    );
  }

  Widget _buildTextField(TextEditingController controller, String label) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: label,
        labelStyle: const TextStyle(fontSize: 16, color: Colors.black),
        border: const OutlineInputBorder(borderRadius: BorderRadius.zero),
        filled: true,
        fillColor: const Color.fromARGB(255, 252, 252, 252),
      ),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }
}
